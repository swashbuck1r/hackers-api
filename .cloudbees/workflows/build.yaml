apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: CI verification workflow
on:
  push:
    branches:
      - "**"
  workflow_dispatch:

permissions:
  scm-token-own: read
  id-token: write


# Environment vars
env:
  APP_NAME: hackers-api
  HOSTNAME: hackers-api.arch.beescloud.com

jobs:
  dump-context:
    steps:
      - uses: docker://golang:1.20.3-alpine3.17
        name: Dump workflow context
        env:
          CLOUDBEES_CONTEXT: ${{ toJSON(cloudbees) }}
          VARS_CONTEXT: ${{ toJSON(vars) }}
          SECRETS_CONTEXT: ${{ toJSON(secrets) }}
          JOB_CONTEXT: ${{ toJSON(job) }}
          STEP_CONTEXT: ${{ toJSON(step) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: |
          echo "----- VARS -----"
          echo "$VARS_CONTEXT"
          echo "----- SECRETS -----"
          echo "$SECRETS_CONTEXT"
          echo "----- CLOUDBEES -----"
          echo "cloudbees.scm.sha: ${{ cloudbees.scm.sha }}"
          echo "$CLOUDBEES_CONTEXT"
          echo "----- JOB -----"
          echo "$JOB_CONTEXT"
          echo "----- STEP -----"
          echo "$STEP_CONTEXT"
          echo "----- STEPS -----"
          echo "$STEPS_CONTEXT"
  test:
    if: ${{ cloudbees.scm.branch == 'main' }}
    env:
      COVER: "coverage.out"
      MIN_COVERAGE: "65"
    outputs:
      CODE_COVERAGE: ${{ steps.RunUnitTest.outputs.CODE_COVERAGE }}
    steps:
      - name: Get source code
        uses: cloudbees-io/checkout@v1

      - name: Run tests
        id: RunUnitTest
        kind: test
        uses: docker://golang:1.23
        run: |
          go install github.com/jstemmer/go-junit-report@latest
          go install github.com/swaggo/swag/cmd/swag@latest
          swag init
          go test -v -timeout 15m -coverprofile=$COVER ./... | tee ./test.log
          test_status_code=${PIPESTATUS[0]}
          cat ./test.log | go-junit-report >./test.xml
          cat coverage.out >> $CLOUDBEES_OUTPUTS/CODE_COVERAGE

          if [ $test_status_code -eq 0 ]; then
            echo "Go Test Passed"
          else
            echo "Go Test Failed exit code $test_status_code"
            exit 1
          fi

          echo "__________________ OUTPUTS __________________"
          echo "NOTICE: test.log (go test), $COVER (gocov), test.xml (JUnit) are available in the workspace."

      - name: Coverage check
        uses: docker://golang:1.23
        run: |
          echo "__________________ COVERAGE CHECK __________________"
          coverage=$(go tool cover -func=$COVER | grep -E '^total:' | awk '{print $3}')
          echo "Unit test Coverage is: $coverage"
          coverage="${coverage%?}"
          if [ -z "$coverage" ]; then
              echo "No coverage information found. Tests might have failed."
              exit 1
          elif awk -v cov="$coverage" -v min_cov="$MIN_COVERAGE" 'BEGIN { exit (cov < min_cov) }'; then
              echo "All tests passed and coverage is greater than $MIN_COVERAGE%."
          else
              echo "Coverage is less than $MIN_COVERAGE%."
              exit 1
          fi

      - name: Run build
        kind: build
        uses: docker://golang:1.23
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          swag init
          go build

      - name: Publish test results
        if: ${{ always() }}
        uses: cloudbees-io/publish-test-results@v1
        with:
          folder-name: ${{ cloudbees.workspace }}/test.xml
          test-type: go

      - name: Publish evidence
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          content: |-
            ## Test code coverage
            ${{ steps.RunUnitTest.outputs.CODE_COVERAGE }}
          format: MARKDOWN

  build-and-publish:
    # if: ${{ cloudbees.scm.branch == 'main' }}
    needs: test
    services:
      docker-registry:
        image: registry:2
    steps:
      - name: Get source code
        uses: cloudbees-io/checkout@v1

      - name: Run build
        kind: build
        uses: docker://golang:1.23
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          swag init
          go build

      - name: Build container image (locally)
        uses: cloudbees-io/kaniko@v1
        if: ${{ cloudbees.scm.branch == 'main' }}
        with:
          destination: 127.0.0.1:5000/myapp:0.0.1
          build-args: BUILDKIT_CONTEXT_KEEP_GIT_DIR=1,BUILDKIT_INLINE_CACHE=1

      - name: Run TruffleHog container scan (pre-publish)
        uses: https://github.com/cloudbees-io/trufflehog-secret-scan-container@v1
        if: ${{ cloudbees.scm.branch == 'main' }}
        with:
          image-location: 127.0.0.1:5000/myapp
          image-tag: 0.0.1

      - name: Configure container registry credentials
        uses: cloudbees-io/configure-oci-credentials@v1
        id: dockerconfig
        with:
          registry: https://docker.io/
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build container image
        id: image-publish
        uses: cloudbees-io/kaniko@v1
        kind: build
        with:
          destination: ${{ vars.DOCKERHUB_USERNAME }}/hackers-api:${{ cloudbees.scm.sha }},${{ vars.DOCKERHUB_USERNAME }}/hackers-api:latest
          build-args: BUILDKIT_CONTEXT_KEEP_GIT_DIR=1,BUILDKIT_INLINE_CACHE=1
          tar-path: container-image.tar

      - name: Run TruffleHog container scan (post-publish)
        uses: https://github.com/cloudbees-io/trufflehog-secret-scan-container@v1
        if: ${{ cloudbees.scm.branch == 'main' }}
        with:
          image-location: ${{ vars.DOCKERHUB_USERNAME }}/hackers-api
          image-tag: ${{ cloudbees.scm.sha }}

      - name: Upload binary from container build
        id: upload-binary
        uses: cloudbees-io/asset-chain-utils/upload-binary@v1
        # if: ${{ cloudbees.scm.branch == 'main' }}
        with:
          file-path: container-image.tar
          file-type: BINARY_CONTAINER
          debug: "true"

      - name: Publish evidence
        uses: cloudbees-io/publish-evidence-item@v1
        if: ${{ cloudbees.scm.branch == 'main' }}
        with:
          content: |-
            ## Built and pushed image to docker hub

            [Docker Hub](https://hub.docker.com/repository/docker/${{ vars.DOCKERHUB_USERNAME }}/hackers-api/tags)

            Deployed hackers-api:${{ cloudbees.scm.sha }}
          format: MARKDOWN

      - name: Package Helm chart
        id: helmpkg
        uses: cloudbees-io/helm-package@v1
        with:
          chart: ./chart
          destination: ./packaged-charts
          version: ${{ cloudbees.version }}
          values: |
            image:
              repository: ${{ vars.DOCKERHUB_USERNAME }}/hackers-api
              tag: ${{ cloudbees.scm.sha }}
            hostname: hackers-api.arch.beescloud.com

      - name: Publish Helm chart
        id: helm-publish
        uses: cloudbees-io/helm-push@v1
        with:
          chart: ${{ steps.helmpkg.outputs.chart }}
          remote: oci://docker.io/${{ vars.DOCKERHUB_USERNAME }}

      - uses: docker://golang:1.20.3-alpine3.17
        name: Dump ending context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: |
          echo "----- JOB -----"
          echo "$JOB_CONTEXT"
          echo "----- STEPS -----"
          echo "$STEPS_CONTEXT"

    outputs:
      chart-location: ${{ steps.helm-publish.outputs.chart }}
      chart-version: ${{ steps.helm-publish.outputs.version }}

  deploy:
    environment: dev
    needs:
      - build-and-publish

    steps:
      - uses: docker://golang:1.20.3-alpine3.17
        name: Dump outputs context
        env:
          OUTPUTS: ${{ toJSON(needs.build-and-publish.outputs) }}
        run: |
          echo "----- OUTPUTS -----"
          echo "$OUTPUTS"

          echo "----- VARS -----"
          echo "${{ needs.build-and-publish.outputs.chart-location }}" | base64

      - name: Login to AWS
        uses: cloudbees-io/configure-aws-credentials@v1
        id: aws-login
        with:
          aws-region: us-east-1
          # aws-access-key-id: ${{ vars.aws_access_key_id }}
          # aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          role-to-assume: arn:aws:iam::189768267137:role/cloudbees-infra-mgmt
          role-duration-seconds: "3600" # need to override default of 6h as our role has 1h max.

      - uses: cloudbees-io/configure-eks-credentials@v1
        with:
          name: cloudbees-quickstart

      - id: install-chart
        name: Install helm chart
        uses: cloudbees-io/helm-install@v1
        with:
          # chart-location: oci://docker.io/${{ vars.DOCKERHUB_USERNAME }}/hackers-api-chart
          chart-location: ${{ needs.build-and-publish.outputs.chart-location }}
          version: ${{ needs.build-and-publish.outputs.chart-version }}
          release-name: ${{ env.APP_NAME }}
          namespace: ${{ env.APP_NAME }}
          values: |
            image:
              repository: ${{ vars.DOCKERHUB_USERNAME }}/hackers-api
              tag: latest
            hostname: "${{ env.HOSTNAME }}"

      - name: Register deployed artifact
        uses: cloudbees-io/register-deployed-artifact@v1
        with:
          name: hackers-api-chart
          version: "${{ needs.build-and-publish.outputs.chart-version }}"
          url: "${{ needs.build-and-publish.outputs.chart-location }}"
          target-environment: dev

      - name: Publish evidence
        uses: cloudbees-io/publish-evidence-item@v1
        with:
          content: |-
            ## Deployment details

            * Deployed to: ${{ env.HOSTNAME }}
            * Running: ${{ needs.build-and-publish.outputs.chart-location }}:${{ needs.build-and-publish.outputs.chart-version }}
          format: MARKDOWN

      - uses: docker://golang:1.20.3-alpine3.17
        name: Dump ending context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: |
          echo "----- JOB -----"
          echo "$JOB_CONTEXT"
          echo "----- STEPS -----"
          echo "$STEPS_CONTEXT"

